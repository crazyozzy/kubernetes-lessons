Конспект практики
#Docker и namespaces
Смотрим PID своей оболочки bash и его namespaces:
ls -l /proc/$$/ns
echo $$
ps aux | grep <PID_number>
Смотрим какие текущие namespaces есть в системе через lsns. Знакомимся с утилитой unshare
lsns
unshare --help
В консоли №2 отделяем процесс bash в отдельный UTS namespace и смотрим что он изменился
unshare -u bash
ls -l /proc/$$/ns
Изменим hostname в консоли №2 и проверим что в консоли №1 он не поменялся
hostname testhost
hostname #эту команду надо выполнить в 2-х консолях
В консоли №1 выполняем команду lsns и видим новый namespace созданный процессом bash:
lsns
Выходим из запущенной ранее оболочки bash на консоли №2 Смотрим текущие процессы и сетевое окружение на консоли №2
exit
ps aux
ip a
В консоли №2 поместим теперь процесс bash в несколько namespace
unshare --pid --net --fork --mount-proc /bin/bash
Снова смотрим в консоли №2 процессы и сетевое окружение. Видим что наш bash отделился. Затем выходим из запущенного bash:
ps aux
ip a
exit
Уст. Docker
Убеждаемся что все ОК. Посмотрим запущенные контейнеры.
docker ps
Собираем наш первый образ:
docker build -t test -<<EOF

FROM alpine
ENTRYPOINT [“ping”]
CMD [“8.8.8.8”]

EOF
Запустим контейнер из собранного образа
docker run --name test --rm -d test
Посмотрим какие namespaces создал docker
lsns
Войдем внутрь контейнера, проверим запущенные процессы и сетевое окружение
docker exec -it test /bin/sh
ps aux
ip a
exit
Теперь воспользуемся утилитой nsenter, чтобы подключиться к namespace этого контейнера. Используем PID этого контейнера:
nsenter -t <PID_number> --pid --net --mount --ipc --uts sh
Убедимся, что мы видим тоже самое окружение, как если бы использовали docker exec
ps aux
ip a
exit
Создадим еще один контейнер
docker build -t  test_resources -<<EOF

FROM alpint
ENTRYPOINT [“sleep”]
CMD [“3600”]

EOF
Запустим контейнер из этого образа, но наложим на него ограничения по ресурсам в 100 Мб ОЗУ и 0,2 CPU
docker run --name test_resources --memory=100m --cpus=”.2” --rm -d test_resources
Воспользуемся утилитой system-cgls чтобы посмотреть текущие cgroups. Находим там SHA нашего контейнера и идем в папку его cgroup по памяти
systemd-cgls #Находим SHA нашего контейнера
cd /sys/fs/cgroup/memory/docker/<SHA контейнера>
Убеждаемся, что в cgroup контейнера действительно есть заданные ограничения
cat memory.limit_in_bytes | awk '{$1=$1/1024/1024; print}'
Убеждаемся, что наш процесс действительно в этой cgroup
cat tasks
Проверяем ограничения по cpu
cd /sys/fs/cgroup/cpu/docker/<SHA контейнера>
Смотрим, что ограничения есть
cat cpu.cfs_quota_us
Ставим libcgroup
yum install libcgroup-tool -y
apt install cgroup-tools -y
Посмотрим cgroups нашего контейнера через утилиту от libcgroup
cgget docker/<SHA контейнера>
Через передачу ключа -r можно посмотреть конкретный параметр cgroup
cgget -r memory.limit_in_bytes docker/<SHA контейнера>
-----------------------------------------------------------------------------------------------------------------
Самостоятельная работа:
Запустить контейнер с именем test_limit из образа test_resource с ограничением в 200 Мб и 0,5 CPU
Получить через утилиту cgget значения memory.limit_in_bytes и cpu.cfs_quota_us этого контейнера
Они должны быть равны 209815200 и 50000 соответственно
-----------------------------------------------------------------------------------------------------------------
Останавливаем ранее запущенные контейнеры и закрываем консоль №2
docker stop $(docker ps -q)

#Закрепляем тему Docker Volume
 Соберем образ с Redis, который использует Volume
docker build -t redis_1 -<<EOF

FROM redis

#Говорим Docker, что папку /data контейнера необходимо замонтировать как volume
VOLUME /data

EOF
Запустим контейнер и посмотрим какие volume есть
docker run --rm -d --name redis_1 redis_1
docker volume ls
Нас не устраивает имя volume. Остановим контейнер
docker stop redis_1
Запустим снова контейнер из этого образа, но предам параметры подключения volume
docker run --rm --name redis_1 -d --mount type=volume,source=data,destination=/data redis_1
Смотрим теперь список volume, смотрим его физическое расположение на хосте
docker volume ls
ll /var/lib/docker/volumes/data/_data/
Зайдем внутрь контейнера, создадим там ключ, запишем его в Redis, убедимся что создался и выйдем
docker exec -it redis_1 bash
ls # видим что папка пуская
redis-cli
set mykey foobar
save
quit

ls #видим что создался файл dump.rdb
exit
Посмотрим физическое содержание нашего volume
ls /var/lib/docker/volumes/data/_data/
Остановим наш контейнер и проверим доступность volume
docker stop redis_1
docker volume ls
Запустим снова наш контейнер и убедимся что наш созданный ключ не пропал
docker run --rm --name redis_1 -d --mount type=volume,source=data,destination=/data redis_1
docker exec -it redis_1 bash
redis-cli
get mykey
save
quit

-----------------------------------------------------------------------------------------------------------------
Самостоятельная работа:
Запустите контейнер с именем redis_2 из образа redis_1 который будет использовать тот же самый volume
Для проверки что все получилось зайдите внутрь контейнера redis_2 и в redis-cli выполните get mykey
Если вы все сделали правильно, то отдастся значение foobar
-----------------------------------------------------------------------------------------------------------------
Прибираемся за собой
docker stop $(docker ps -q)

docker volume ls

docker volume rm $(docker volume ls -q)



# Docker-compose
Устанавливаем docker-compose
yum install docker-compose -y

или

sudo curl -L "https://github.com/docker/compose/releases/download/1.28.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
	sudo chmod +x /usr/local/bin/docker-compose
Клонируем себе репозиторий с практикой
cd /srv
git clone git@gitlab.slurm.io:school/slurm.git
Переходим в каталог с практикой
cd /srv/slurm/1.Docker/compose
Запустим наш проект. Это приложение на Python/Flask, которое считает количество обращений к нему
docker-compose up -d
curl 127.0.0.1 #пару раз

#должны получать строку
#”Hello, World! I have been seen 2 times.”
Смотрим наши volume и видим, что снова непонятное имя
docker volume ls
Останавливаем проект, удаляем volume, смотрим соседний файл compose
docker-compose down
docker volume rm $(docker volume ls -q)

cat docker-compose.yaml_vol
Запускаем проект из этого файла
docker-compose -f docker-compose.yaml_vol up -d
Проверим, что наши данные о посещении сохраняются Сделаем папу обращений к приложению, затем остановим его, снова поднимем и снова сделаем пару обращений
curl 127.0.0.1 && curl 127.0.0.1
docker-compose down
curl 127.0.0.1 && curl 127.0.0.1
Погасим приложение
docker-compose -f docker-compose.yaml_vol down
 

-----------------------------------------------------------------------------------------------------------------
Самостоятельная работа:
Запустить это же приложение но с health check сервиса redis через команду redis-cli ping
Старт сервиса web сделать зависимым от здоровья сервиса redis
Также ограничить через compose-файл сервису redis RAM до 500 Мб и CPU до 0.5
Проверить что все получилось можно сделав после запуска и получив значения:
docker inspect compose_redis_1 | grep "Memory\|NanoCpus"
	"Memory": 524288000,
"NanoCpus": 500000000,
Либо использовать для проверки утилиту cgget
-----------------------------------------------------------------------------------------------------------------
Решение самостоятельной работы:
Для установки зависимости контейнера web от redis в docker-compose.homework.yaml необходимо дописать
    depends_on:
      redis:
        condition: service_healthy
Для healthcheck redis необходимо дописать в тот же файл
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 5s
      retries: 5
      start_period: 1s
Для включения ограничений в тот же файл дописываем
    mem_limit: 524288000
    cpus: 0.5
При проверке получаем заданные значения
-----------------------------------------------------------------------------------------------------------------
